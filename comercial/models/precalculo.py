# comercial/models/precalculo.py

from django.db import models
from django.contrib.auth import get_user_model
from comercial.models import Cotacao
from .item import Item
from django_ckeditor_5.fields import CKEditor5Field
from django.db import models
from django.contrib.auth import get_user_model
from django.utils import timezone
from django_ckeditor_5.fields import CKEditor5Field
from decimal import Decimal

from .clientes import Cliente
from .centro_custo import CentroDeCusto
from tecnico.models.roteiro import InsumoEtapa, RoteiroProducao, EtapaRoteiro
from qualidade_fornecimento.models.fornecedor import FornecedorQualificado
from qualidade_fornecimento.models.materiaPrima_catalogo import MateriaPrimaCatalogo
from comercial.models.ferramenta import Ferramenta
from .item import Item
from decimal import Decimal, ROUND_HALF_UP

User = get_user_model()

class AuditModel(models.Model):
    """Campos de auditoria / assinatura em todos os registros."""
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="Criado em")
    created_by = models.ForeignKey(
        User, on_delete=models.SET_NULL, null=True, blank=True,
        related_name="%(class)s_created", verbose_name="Criado por"
    )
    updated_at = models.DateTimeField(auto_now=True, verbose_name="Atualizado em")
    updated_by = models.ForeignKey(
        User, on_delete=models.SET_NULL, null=True, blank=True,
        related_name="%(class)s_updated", verbose_name="Atualizado por"
    )

    class Meta:
        abstract = True


from decimal import Decimal

from decimal import Decimal
from django.db import models
from django.contrib.auth import get_user_model
from comercial.models import Cotacao
from django_ckeditor_5.fields import CKEditor5Field

User = get_user_model()

class PreCalculo(models.Model):
    cotacao = models.ForeignKey(
        Cotacao,
        on_delete=models.CASCADE,
        related_name="precalculos"
    )
    numero = models.PositiveIntegerField("N√∫mero do Pr√©-C√°lculo", editable=False)
    criado_em = models.DateTimeField(auto_now_add=True)
    criado_por = models.ForeignKey(User, on_delete=models.PROTECT)
    observacoes_materiais = CKEditor5Field("Observa√ß√µes gerais de materiais", blank=True, null=True)
    observacoes_servicos = CKEditor5Field("Observa√ß√µes gerais de servi√ßos", config_name="default", blank=True, null=True)
    observacoes_roteiro = CKEditor5Field("Observa√ß√µes da Etapa", config_name="default", blank=True, null=True)


    preco_selecionado = models.DecimalField(
        "Pre√ßo Final Selecionado (R$)",
        max_digits=12,
        decimal_places=4,
        null=True,
        blank=True
    )

   
    preco_manual = models.DecimalField(
        "Pre√ßo Final Manual (R$)",
        max_digits=12,
        decimal_places=4,
        null=True,
        blank=True
    )
    observacoes_precofinal = CKEditor5Field("Observa√ß√µes sobre o Pre√ßo Final", config_name="default", blank=True, null=True)



    from decimal import Decimal, ROUND_HALF_UP

    def calcular_precos_sem_impostos(self):
        regras = getattr(self, "regras_calculo_item", None)
        if not regras:
            return []

        # üßÆ Componentes de custo
        custos_diretos = sum(rot.custo_total for rot in self.roteiro_item.all())

        mat = self.materiais.filter(selecionado=True).first()
        materiais = Decimal(mat.peso_bruto_total or 0) * Decimal(mat.preco_kg or 0) if mat else Decimal(0)

        servicos = sum(
            Decimal(s.peso_liquido or 0) * Decimal(s.preco_kg or 0)
            for s in self.servicos.filter(selecionado=True)
        )

        base = (custos_diretos + materiais + servicos).quantize(Decimal("0.0001"), rounding=ROUND_HALF_UP)

        # üìâ Impostos totais (todos)
        percentual_total_impostos = (
            Decimal(regras.icms or 0) +
            Decimal(regras.pis or 0) +
            Decimal(regras.confins or 0) +
            Decimal(regras.ir or 0) +
            Decimal(regras.csll or 0) +
            Decimal(regras.df or 0) +
            Decimal(regras.dv or 0)
        )

        # üö´ Apenas impostos indiretos de venda a serem subtra√≠dos
        percentual_impostos_venda = (
            Decimal(regras.icms or 0) +
            Decimal(regras.pis or 0) +
            Decimal(regras.confins or 0)
        )

        qtde = Decimal(getattr(self.analise_comercial_item, "qtde_estimada", 1) or 1)

        margens = [0, 5, 10, 15, 20, 25, 30, 35, 40]
        valores = []

        for margem in margens:
            percentual_sobre_base = Decimal(100) - percentual_total_impostos - Decimal(margem)
            if percentual_sobre_base <= 0:
                continue

            fator_com_impostos = (Decimal(100) / percentual_sobre_base).quantize(Decimal("0.0001"), rounding=ROUND_HALF_UP)
            preco_com_impostos = (base * fator_com_impostos).quantize(Decimal("0.0000001"), rounding=ROUND_HALF_UP)

            # üîÅ Remo√ß√£o dos impostos de venda
            fator_reducao = (Decimal(100) - percentual_impostos_venda) / Decimal(100)
            preco_sem_impostos = (preco_com_impostos * fator_reducao).quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)

            unitario = (preco_sem_impostos / qtde).quantize(Decimal("0.0000001"), rounding=ROUND_HALF_UP)

            valores.append({
                "percentual": margem,
                "total": preco_sem_impostos,
                "unitario": unitario,
            })

        return valores






    def calcular_precos_com_impostos(self):
        regras = getattr(self, "regras_calculo_item", None)
        if not regras:
            return []

        # üßÆ Componentes de custo
        custos_diretos = sum(rot.custo_total for rot in self.roteiro_item.all())

        mat = self.materiais.filter(selecionado=True).first()
        materiais = Decimal(mat.peso_bruto_total or 0) * Decimal(mat.preco_kg or 0) if mat else Decimal(0)

        servicos = sum(
            Decimal(s.peso_liquido_total or 0) * Decimal(s.preco_kg or 0)
            for s in self.servicos.filter(selecionado=True)
        )

        base = (custos_diretos + materiais + servicos).quantize(Decimal("0.0001"), rounding=ROUND_HALF_UP)

        # üìä Percentual total de impostos (ICMS, PIS, COFINS, IR, CSLL, DF, DV)
        percentual_impostos = (
            Decimal(regras.icms or 0) +
            Decimal(regras.pis or 0) +
            Decimal(regras.confins or 0) +
            Decimal(regras.ir or 0) +
            Decimal(regras.csll or 0) +
            Decimal(regras.df or 0) +
            Decimal(regras.dv or 0)
        )

        # üì¶ Quantidade estimada
        qtde = Decimal(getattr(self.analise_comercial_item, "qtde_estimada", 1) or 1)

        # üìà Margens em %
        margens = [0, 5, 10, 15, 20, 25, 30, 35, 40]
        valores = []

        for margem in margens:
            # üß† √çndice de repasse = 100 - impostos - margem
            percentual_sobre_base = Decimal(100) - percentual_impostos - Decimal(margem)

            if percentual_sobre_base <= 0:
                continue  # evita divis√£o por zero ou negativa

            fator_repasse = (Decimal(100) / percentual_sobre_base).quantize(Decimal("0.0001"), rounding=ROUND_HALF_UP)

            total = (base * fator_repasse).quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)
            unitario = (total / qtde).quantize(Decimal("0.0001"), rounding=ROUND_HALF_UP)

            valores.append({
                "percentual": margem,
                "total": total,
                "unitario": unitario,
            })

        return valores







    def opcoes_precos(self):
        """Combina todos os valores calculados para alimentar o <select>."""
        opcoes = []
        for item in self.calcular_precos_sem_impostos():
            opcoes.append({
                "descricao": f"{item['percentual']}% sem impostos",
                "valor": item["total"]
            })
        for item in self.calcular_precos_com_impostos():
            opcoes.append({
                "descricao": f"{item['percentual']}% com impostos",
                "valor": item["total"]
            })
        return opcoes
    

    @property
    def qtde_estimada(self):
        return Decimal(getattr(self.analise_comercial_item, "qtde_estimada", 1) or 1)


    def custo_unitario_materia_prima(self):
        mat = self.materiais.filter(selecionado=True).first()
        total = Decimal((mat.peso_bruto_total or 0)) * Decimal((mat.preco_kg or 0)) if mat else Decimal(0)
        return total / self.qtde_estimada  # ‚úÖ Sem par√™nteses

    def custo_unitario_servicos_externos(self):
        total = sum(
            Decimal((s.peso_liquido_total or 0)) * Decimal((s.preco_kg or 0))
            for s in self.servicos.filter(selecionado=True)
        )
        return total / self.qtde_estimada  # ‚úÖ Sem par√™nteses

    def custo_unitario_roteiro(self):
        total = sum(rot.custo_total for rot in self.roteiro_item.all())
        return total / self.qtde_estimada  # ‚úÖ Sem par√™nteses


    def custo_unitario_total_sem_impostos(self):
        return (
            self.custo_unitario_materia_prima()
            + self.custo_unitario_servicos_externos()
            + self.custo_unitario_roteiro()
        )



    def save(self, *args, **kwargs):
        if not self.numero:
            ultimo = PreCalculo.objects.aggregate(
                models.Max("numero")
            )["numero__max"] or 0
            self.numero = ultimo + 1
        super().save(*args, **kwargs)

    def __str__(self):
        return f"Pr√©-C√°lculo #{self.numero} ‚Äì Cota√ß√£o #{self.cotacao.numero}"




class AnaliseComercial(models.Model):
    """Perguntas de an√°lise comercial vinculadas √† cota√ß√£o."""    
    STATUS_CHOICES = [
        ("andamento", "Em Andamento"),
        ("aprovado", "Aprovado"),
        ("reprovado", "Reprovado"),
        ("amostras", "Solicita√ß√£o de Amostras"),
    ]

    METODOLOGIA = [
        ("N√£o aplic√°vel", "N√£o aplic√°vel"),
        ("PPAP N√≠vel 1", "PPAP N√≠vel 1"),
        ("PPAP N√≠vel 2", "PPAP N√≠vel 2"),
        ("PPAP N√≠vel 3", "PPAP N√≠vel 3"),
        ("PPAP N√≠vel 4", "PPAP N√≠vel 4"),
        ("PPAP N√≠vel 5", "PPAP N√≠vel 5"),
    ]
    RESULTADO = [
        ("Vi√°vel", "Viavel (O produto pode ser produzido conforme especificado,sem revisoes) "),
        ("Vi√°vel c/ Recomenda√ß√µes", "Vi√°vel (altera√ß√µes recomendadas conforme considera√ß√µes)"),
        ("Invi√°vel", "Invi√°vel (necessidade de revis√£o do projeto para a manufatura do produto dentro dos requisitos especificados)"),
    ]

    PERIODICIDADE = [
        ("√önico", "√önico"),
        ("Quinzenal", "Quinzenal"),
        ("Mensal", "Mensal"),
        ("Trimestral", "Trimestral"),
        ("Semestral", "Semestral"),
        ("Anual", "Anual"),
        ("Espor√°dico", "Espor√°dico"),
    ]

    roteiro_selecionado = models.ForeignKey(
        RoteiroProducao,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Roteiro Selecionado"
    )
    precalculo = models.OneToOneField("PreCalculo", on_delete=models.CASCADE, related_name="analise_comercial_item", null=True, blank=True)
    item = models.ForeignKey(Item, on_delete=models.PROTECT, verbose_name="Selecione o item")

    metodologia = models.CharField("Metodologia de Aprova√ß√£o", max_length=30, choices=METODOLOGIA)

    material_fornecido = models.BooleanField("2. Material fornecido pelo cliente ?", default=False)
    material_fornecido_obs = models.CharField("Detalhar Material", max_length=200, blank=True)

    requisitos_entrega = models.BooleanField("3. Existe Requisitos de Entrega (frequ√™ncia)?", default=False)
    requisitos_entrega_obs = models.CharField("Detalhar Entrega", max_length=200, blank=True)

    requisitos_pos_entrega = models.BooleanField("4. Existe Requisitos P√≥s-Entrega ?", default=False)
    requisitos_pos_entrega_obs = models.CharField("Detalhar P√≥s-Entrega", max_length=200, blank=True)

    requisitos_comunicacao = models.BooleanField("5. Existe requisito de Comunica√ß√£o Eletr√¥nica com o cliente?", default=False)
    requisitos_comunicacao_obs = models.CharField("Detalhar Comunica√ß√£o", max_length=200, blank=True)

    requisitos_notificacao = models.BooleanField("6. Existe requisito de notifica√ß√£o de Embarque ?", default=False)
    requisitos_notificacao_obs = models.CharField("Detalhar Notifica√ß√£o", max_length=200, blank=True)

    especificacao_embalagem = models.BooleanField("7. Existe especifica√ß√£o de Embalagem", default=False)
    especificacao_embalagem_obs = models.CharField("Detalhar Embalagem", max_length=200, blank=True)

    especificacao_identificacao = models.BooleanField("8. Existe especifica√ß√£o de Identifica√ß√£o", default=False)
    especificacao_identificacao_obs = models.CharField("Detalhar Identifica√ß√£o", max_length=200, blank=True)

    tipo_embalagem = models.BooleanField("9. Qual o tipo de embalagem a ser utilizada ?", default=False)
    tipo_embalagem_obs = models.CharField("Detalhar Tipo", max_length=200, blank=True)

    conclusao = models.CharField("Conclus√£o da An√°lise Cr√≠tica", max_length=30, choices=RESULTADO)
    consideracoes = CKEditor5Field("Considera√ß√µes", config_name="default", blank=True, null=True)
    qtde_estimada = models.PositiveIntegerField("Quantidade Estimada", null=True, blank=True)
    capacidade_produtiva = models.BooleanField("Capacidade produtiva dispon√≠vel?", null=True, blank=True)

    # üîê Metadados de Assinatura
    usuario = models.ForeignKey(User, on_delete=models.PROTECT, null=True, blank=True, editable=False)
    assinado_em = models.DateTimeField(auto_now_add=True)
    data_assinatura = models.DateTimeField("Data da assinatura", null=True, blank=True)
    assinatura_nome = models.CharField("Nome da assinatura", max_length=150, null=True, blank=True)
    assinatura_cn = models.CharField("CN da assinatura (email)", max_length=150, null=True, blank=True)
    periodo = models.CharField("Periodicidade de Fornecimento", max_length=20, choices=PERIODICIDADE, blank=True, null=True)
    status = models.CharField("Status da An√°lise", max_length=20, choices=STATUS_CHOICES, default="andamento")
    motivo_reprovacao = CKEditor5Field("Motivo da Reprova√ß√£o", config_name="default", blank=True, null=True)
    
    class Meta:
        verbose_name = "An√°lise Comercial"
        verbose_name_plural = "An√°lises Comerciais"

    def __str__(self):
        return f"An√°lise Comercial ‚Äì Cota√ß√£o #{self.precalculo.cotacao.numero}"


class PreCalculoMaterial(AuditModel):

    STATUS_CHOICES = [
        ('aguardando', 'Aguardando Cota√ß√£o'),
        ('ok', 'OK'),
    ]

    precalculo = models.ForeignKey("PreCalculo", on_delete=models.CASCADE, related_name="materiais", null=True, blank=True)
    roteiro = models.ForeignKey(RoteiroProducao, on_delete=models.PROTECT, verbose_name="Roteiro de Produ√ß√£o", null=True, blank=True)

    # Copiados do Roteiro/Insumo na cria√ß√£o
    nome_materia_prima = models.CharField("Nome da Mat√©ria-prima", max_length=200, blank=True, null=True)
    codigo = models.CharField("C√≥digo", max_length=50)
    descricao = models.CharField("Descri√ß√£o", max_length=300, blank=True, null=True)
    unidade = models.CharField("Unidade", max_length=20, blank=True, null=True)

    lote_minimo = models.PositiveIntegerField("Lote M√≠nimo", null=True, blank=True)
    entrega_dias = models.PositiveIntegerField("Entrega (dias)", null=True, blank=True)
    fornecedor = models.ForeignKey(FornecedorQualificado, on_delete=models.PROTECT, null=True, blank=True)
    icms = models.DecimalField("ICMS (%)", max_digits=5, decimal_places=2, null=True, blank=True)
    tipo_material = models.CharField("Tipo de Material", max_length=100, blank=True, null=True)

    selecionado = models.BooleanField(default=False)

    desenvolvido_mm = models.DecimalField("Desenvolvido (mm)", max_digits=8, decimal_places=4)
    peso_liquido = models.DecimalField("Peso L√≠quido (kg)", max_digits=20, decimal_places=7)
    peso_bruto = models.DecimalField("Peso Bruto (kg)", max_digits=20, decimal_places=7)
    peso_bruto_total = models.DecimalField("Peso Bruto Total (kg)", max_digits=20, decimal_places=7, null=True, blank=True)
    preco_kg = models.DecimalField("Pre√ßo /kg", max_digits=12, decimal_places=4, null=True, blank=True)

    status = models.CharField("Status da Cota√ß√£o", max_length=20, choices=STATUS_CHOICES, default='aguardando')

    # üîê Metadados de Assinatura
    usuario = models.ForeignKey(User, on_delete=models.PROTECT, null=True, blank=True, editable=False)
    assinado_em = models.DateTimeField(auto_now_add=True)
    data_assinatura = models.DateTimeField("Data da assinatura", null=True, blank=True)
    assinatura_nome = models.CharField("Nome da assinatura", max_length=150, null=True, blank=True)
    assinatura_cn = models.CharField("CN da assinatura (email)", max_length=150, null=True, blank=True)

    class Meta:
        verbose_name = "Pr√©-C√°lculo Mat√©ria-Prima"
        verbose_name_plural = "Materiais Pr√©-C√°lculo"
    
    def save(self, *args, **kwargs):
        # üß† Preenchimento autom√°tico a partir do cat√°logo (caso esteja faltando)
        if self.codigo:
            try:
                materia = MateriaPrimaCatalogo.objects.get(codigo=self.codigo)

                # Atualiza se estiver em branco ou quiser sempre for√ßar
                if not self.descricao:
                    self.descricao = materia.descricao
                if not self.tipo_material:
                    self.tipo_material = materia.tipo_material

            except MateriaPrimaCatalogo.DoesNotExist:
                pass  # evita erro se n√£o encontrar o c√≥digo

        super().save(*args, **kwargs)



class PreCalculoServicoExterno(AuditModel):
    """Servi√ßos externos do pr√©-c√°lculo, baseados em insumos de etapas com setor 'Tratamento Externo'."""

    STATUS_CHOICES = [
        ('aguardando', 'Aguardando Cota√ß√£o'),
        ('ok', 'OK'),
    ]

    precalculo = models.ForeignKey(
        "PreCalculo",
        on_delete=models.CASCADE,
        related_name="servicos",
        null=True, blank=True
    )

    insumo = models.ForeignKey(
        InsumoEtapa,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Insumo (original do roteiro)"
    )

    nome_insumo = models.CharField("Nome do Insumo", max_length=200, blank=True, null=True)
    codigo_materia_prima = models.CharField("C√≥digo MP", max_length=50, blank=True, null=True)
    descricao_materia_prima = models.CharField("Descri√ß√£o MP", max_length=300, blank=True, null=True)
    unidade = models.CharField("Unidade MP", max_length=20, blank=True, null=True)


    lote_minimo = models.PositiveIntegerField("Lote M√≠nimo", null=True, blank=True)
    entrega_dias = models.PositiveIntegerField("Entrega (dias)", null=True, blank=True)
    fornecedor = models.ForeignKey(
        FornecedorQualificado, on_delete=models.PROTECT,
        null=True, blank=True
    )
    icms = models.DecimalField(
        "ICMS (%)", max_digits=5, decimal_places=2,
        null=True, blank=True
    )
    desenvolvido_mm = models.DecimalField("Desenvolvido (mm)", max_digits=8, decimal_places=2)
    peso_liquido = models.DecimalField("Peso L√≠quido (kg)", max_digits=20, decimal_places=7)
    peso_bruto = models.DecimalField("Peso Bruto (kg)", max_digits=20, decimal_places=7)
    preco_kg = models.DecimalField("Pre√ßo /kg", max_digits=12, decimal_places=4, null=True, blank=True)
    selecionado = models.BooleanField(default=False)
    peso_liquido_total = models.DecimalField("Peso L√≠quido Total (kg)", max_digits=20, decimal_places=7, null=True, blank=True)

    status = models.CharField("Status da Cota√ß√£o", max_length=20, choices=STATUS_CHOICES, default='aguardando')

    # üîê Metadados de Assinatura
    usuario = models.ForeignKey(User, on_delete=models.PROTECT, null=True, blank=True, editable=False)
    assinado_em = models.DateTimeField(auto_now_add=True)
    data_assinatura = models.DateTimeField("Data da assinatura", null=True, blank=True)
    assinatura_nome = models.CharField("Nome da assinatura", max_length=150, null=True, blank=True)
    assinatura_cn = models.CharField("CN da assinatura (email)", max_length=150, null=True, blank=True)

    class Meta:
        verbose_name = "Pr√©-C√°lculo Servi√ßo Externo"
        verbose_name_plural = "Servi√ßos Externos Pr√©-C√°lculo"

    def save(self, *args, **kwargs):
        if self.insumo and self.insumo.materia_prima:
            self.codigo = self.insumo.materia_prima.codigo
        super().save(*args, **kwargs)

    def __str__(self):
        try:
            return f"Servi√ßo Externo - {self.insumo.materia_prima.codigo}"
        except Exception:
            return "Servi√ßo Externo - sem c√≥digo"

class AvaliacaoTecnica(AuditModel):
    RESULTADO = [
        ("Vi√°vel", "Vi√°vel (O produto pode ser produzido conforme especificado, sem revis√µes)"),
        ("Vi√°vel c/ Recomenda√ß√µes", "Vi√°vel (altera√ß√µes recomendadas conforme considera√ß√µes)"),
        ("Invi√°vel", "Invi√°vel (necessidade de revis√£o do projeto para a manufatura do produto dentro dos requisitos especificados)"),
    ]

    OPCOES_BOOL_EXTENDIDA = [
        (None, "N√£o aplic√°vel"),
        (True, "Sim"),
        (False, "N√£o"),
    ]

    precalculo = models.OneToOneField(
        "PreCalculo", on_delete=models.CASCADE,
        related_name="avaliacao_tecnica_item", null=True, blank=True
    )

    # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Quest√µes T√©cnicas ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

    possui_projeto = models.BooleanField("1. Existe caracter√≠stica especial al√©m das relacionadas nas especifica√ß√µes?", default=False)
    projeto_obs = models.CharField("Detalhes sobre o projeto/desenho", max_length=300, blank=True)

    precisa_dispositivo = models.BooleanField("2. A pe√ßa √© item de apar√™ncia?", default=False)
    dispositivo_obs = models.CharField("Detalhes sobre o dispositivo", max_length=300, blank=True)

    caracteristicas_criticas = models.BooleanField("3. O cliente forneceu FMEA de produto?", default=False)
    criticas_obs = models.CharField("Quais s√£o essas caracter√≠sticas?", max_length=300, blank=True)

    precisa_amostras = models.BooleanField("4. O cliente solicitou testes adicionais?", default=False)
    amostras_obs = models.CharField("Detalhes sobre as amostras", max_length=300, blank=True)

    restricao_dimensional = models.BooleanField("5. Lista de fornecedores/materiais aprovados?", default=False)
    restricao_obs = models.CharField("Descreva a restri√ß√£o", max_length=300, blank=True)

    acabamento_superficial = models.BooleanField("6. Normas/especifica√ß√µes est√£o dispon√≠veis?", default=False)
    acabamento_obs = models.CharField("Descreva o acabamento", max_length=300, blank=True)

    validacao_metrologica = models.BooleanField("7. Existem requisitos estatut√°rios/regulamentares?", default=False)
    metrologia_obs = models.CharField("Detalhes sobre a valida√ß√£o", max_length=300, blank=True)

    rastreabilidade = models.BooleanField("8. Requisitos adicionais ou n√£o declarados?", default=False)
    rastreabilidade_obs = models.CharField("Detalhes da rastreabilidade", max_length=300, blank=True)

    # Campos adicionais que estavam ausentes
    item_aparencia = models.BooleanField("2. A pe√ßa √© item de apar√™ncia?", null=True, blank=True)
    item_aparencia_obs = models.CharField("Detalhes", max_length=300, blank=True)

    fmea = models.BooleanField("3. O cliente forneceu FMEA de produto?", null=True, blank=True)
    fmea_obs = models.CharField("Detalhes", max_length=300, blank=True)

    teste_solicitado = models.BooleanField("4. O cliente solicitou testes adicionais?", null=True, blank=True)
    teste_solicitado_obs = models.CharField("Detalhes", max_length=300, blank=True)

    lista_fornecedores = models.BooleanField("5. Lista de fornecedores/materiais aprovados?", null=True, blank=True)
    lista_fornecedores_obs = models.CharField("Detalhes", max_length=300, blank=True)

    normas_disponiveis = models.BooleanField("6. Normas/especifica√ß√µes est√£o dispon√≠veis?", null=True, blank=True)
    normas_disponiveis_obs = models.CharField("Detalhes", max_length=300, blank=True)

    requisitos_regulamentares = models.BooleanField("7. Existem requisitos estatut√°rios/regulamentares?", null=True, blank=True)
    requisitos_regulamentares_obs = models.CharField("Detalhes", max_length=300, blank=True)

    requisitos_adicionais = models.BooleanField("8. Requisitos adicionais ou n√£o declarados?", null=True, blank=True)
    requisitos_adicionais_obs = models.CharField("Detalhes", max_length=300, blank=True)

    metas_a = models.BooleanField("9a. Metas de qualidade (exemplo PPM)?", default=False)
    metas_a_obs = models.CharField("Detalhes", max_length=300, blank=True)

    metas_b = models.BooleanField("9b. Metas de produtividade?", default=False)
    metas_b_obs = models.CharField("Detalhes", max_length=300, blank=True)

    metas_c = models.BooleanField("9c. Metas de desempenho (exemplo: Cp, Cpk, etc.)?", default=False)
    metas_c_obs = models.CharField("Detalhes", max_length=300, blank=True)

    metas_confiabilidade = models.BooleanField("9d. Metas de confiabilidade?", null=True, blank=True)
    metas_confiabilidade_obs = models.CharField("Detalhes", max_length=300, blank=True)

    metas_d = models.BooleanField("9e. Metas de funcionamento?", default=False)
    metas_d_obs = models.CharField("Detalhes", max_length=300, blank=True)

    seguranca = models.BooleanField("10. Os requisitos sobre o item de seguran√ßa foram considerados?", null=True, choices=OPCOES_BOOL_EXTENDIDA)
    seguranca_obs = models.CharField("Detalhes", max_length=300, blank=True)

    requisito_especifico = models.BooleanField("11. O cliente forneceu requisito espec√≠fico?", null=True, choices=OPCOES_BOOL_EXTENDIDA)
    requisito_especifico_obs = models.CharField("Detalhes", max_length=300, blank=True)

    conclusao_tec = models.CharField("Conclus√£o da An√°lise Cr√≠tica", max_length=30, choices=RESULTADO)
    consideracoes_tec = CKEditor5Field("Considera√ß√µes T√©cnicas", config_name="default", blank=True, null=True)

    # üîê Metadados de Assinatura
    usuario = models.ForeignKey(User, on_delete=models.PROTECT, null=True, blank=True, editable=False)
    assinado_em = models.DateTimeField(auto_now_add=True)
    data_assinatura = models.DateTimeField("Data da assinatura", null=True, blank=True)
    assinatura_nome = models.CharField("Nome da assinatura", max_length=150, null=True, blank=True)
    assinatura_cn = models.CharField("CN da assinatura (email)", max_length=150, null=True, blank=True)

    class Meta:
        verbose_name = "Avalia√ß√£o T√©cnica"
        verbose_name_plural = "Avalia√ß√µes T√©cnicas"




class CotacaoFerramenta(AuditModel):
    """Ferramentas envolvidas na cota√ß√£o."""
    precalculo = models.ForeignKey("PreCalculo", on_delete=models.CASCADE, related_name="ferramentas_item",null=True, blank=True)

    ferramenta = models.ForeignKey(
        Ferramenta, on_delete=models.PROTECT
    )
    observacoes  = CKEditor5Field("Observa√ß√µes da Ferramenta", config_name="default", blank=True, null=True)
    valor_utilizado = models.DecimalField("Valor utilizado na cota√ß√£o (R$)", max_digits=12, decimal_places=2,null=True, blank=True)
    usuario = models.ForeignKey(User, on_delete=models.PROTECT, null=True, blank=True, editable=False)
    assinado_em = models.DateTimeField(auto_now_add=True)
    data_assinatura = models.DateTimeField("Data da assinatura", null=True, blank=True)
    assinatura_nome = models.CharField("Nome da assinatura", max_length=150, null=True, blank=True)
    assinatura_cn = models.CharField("CN da assinatura (email)", max_length=150, null=True, blank=True)

    class Meta:
        verbose_name = "Ferramenta na Cota√ß√£o"
        verbose_name_plural = "Ferramentas na Cota√ß√£o"

    @property
    def valor_aplicado(self) -> Decimal:
            """
            Preferir o valor informado na cota√ß√£o; se vazio, usar o valor do cadastro da Ferramenta.
            """
            base = self.ferramenta.valor_total or Decimal("0.00")
            return Decimal(self.valor_utilizado) if self.valor_utilizado not in [None, ""] else Decimal(base)
    
class RegrasCalculo(AuditModel):
    """Impostos e encargos para o pr√©-c√°lculo."""
    precalculo = models.OneToOneField("PreCalculo", on_delete=models.CASCADE, related_name="regras_calculo_item",null=True, blank=True)

    icms = models.DecimalField("ICMS (%)", max_digits=5, decimal_places=2)
    pis = models.DecimalField("PIS (%)", max_digits=5, decimal_places=2)
    confins = models.DecimalField("Cofins (%)", max_digits=5, decimal_places=2)
    ir = models.DecimalField("IR (%)", max_digits=5, decimal_places=2)
    csll = models.DecimalField("CSLL (%)", max_digits=5, decimal_places=2)
    df = models.DecimalField("DF (%)", max_digits=5, decimal_places=2)
    dv = models.DecimalField("DV (%)", max_digits=5, decimal_places=2)

# üîê Metadados de Assinatura
    usuario = models.ForeignKey(User, on_delete=models.PROTECT, null=True, blank=True, editable=False)
    assinado_em = models.DateTimeField(auto_now_add=True)
    data_assinatura = models.DateTimeField("Data da assinatura", null=True, blank=True)
    assinatura_nome = models.CharField("Nome da assinatura", max_length=150, null=True, blank=True)
    assinatura_cn = models.CharField("CN da assinatura (email)", max_length=150, null=True, blank=True)

    class Meta:
        verbose_name = "Regras de C√°lculo"
        verbose_name_plural = "Regras de C√°lculo"


class RoteiroCotacao(AuditModel):
    """C√≥pia de dados do roteiro de produ√ß√£o para a cota√ß√£o."""
    precalculo = models.ForeignKey("PreCalculo", on_delete=models.CASCADE, related_name="roteiro_item",null=True, blank=True)

    etapa = models.PositiveIntegerField("Etapa N¬∫")
    setor = models.ForeignKey(CentroDeCusto, on_delete=models.PROTECT)
    pph = models.DecimalField("Pe√ßas por Hora", max_digits=10, decimal_places=4)
    setup_minutos = models.PositiveIntegerField("Tempo de Setup (min)")
    custo_hora = models.DecimalField("Custo Hora", max_digits=12, decimal_places=4)
    custo_total = models.DecimalField("Custo Total", max_digits=14, decimal_places=4)
    maquinas_roteiro = models.TextField("M√°quinas da Etapa", blank=True, null=True)
    nome_acao = models.TextField("Nome da A√ß√£o", blank=True, null=True)

    # üîê Metadados de Assinatura
    usuario = models.ForeignKey(User, on_delete=models.PROTECT, null=True, blank=True, editable=False)
    assinado_em = models.DateTimeField(auto_now_add=True)
    data_assinatura = models.DateTimeField("Data da assinatura", null=True, blank=True)
    assinatura_nome = models.CharField("Nome da assinatura", max_length=150, null=True, blank=True)
    assinatura_cn = models.CharField("CN da assinatura (email)", max_length=150, null=True, blank=True)

    class Meta:
        verbose_name = "Roteiro na Cota√ß√£o"
        verbose_name_plural = "Roteiros na Cota√ß√£o"


class Desenvolvimento(AuditModel):
    """Modelo final de desenvolvimento da cota√ß√£o."""
    precalculo = models.OneToOneField("PreCalculo", on_delete=models.CASCADE, related_name="desenvolvimento_item",null=True, blank=True)
    completo = models.BooleanField("Tudo preenchido corretamente?", default=False)
    consideracoes = CKEditor5Field("Considera√ß√µes Finais", config_name="default", blank=True, null=True)
# üîê Metadados de Assinatura
    usuario = models.ForeignKey(User, on_delete=models.PROTECT, null=True, blank=True, editable=False)
    assinado_em = models.DateTimeField(auto_now_add=True)
    data_assinatura = models.DateTimeField("Data da assinatura", null=True, blank=True)
    assinatura_nome = models.CharField("Nome da assinatura", max_length=150, null=True, blank=True)
    assinatura_cn = models.CharField("CN da assinatura (email)", max_length=150, null=True, blank=True)
    
    class Meta:
        verbose_name = "Desenvolvimento da Cota√ß√£o"
        verbose_name_plural = "Desenvolvimentos da Cota√ß√£o"
